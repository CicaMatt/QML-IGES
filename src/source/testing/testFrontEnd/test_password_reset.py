# Generated by Selenium IDE
import hashlib
import pathlib

import requests
from selenium.webdriver.support import expected_conditions as EC

import pytest
import time
import json

from cryptography.fernet import Fernet
from flask_login import current_user
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from sqlalchemy_utils import database_exists, create_database, drop_database

from src import app, db
from src.source.model.models import User


class TestDataset():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
    app.config["SQLALCHEMY_DATABASE_URI"] = "mysql://root@127.0.0.1/quantumknn_db"
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
      with app.app_context():
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])
    with app.app_context():
      password = "Password123"
      password = hashlib.sha512(password.encode()).hexdigest()
      utente = User(
        email="ADeCurtis123@gmail.com",
        password=password,
        username="Antonio de Curtis",
        name="Antonio",
        surname="De Curtis",
        token="43a75c20e78cef978267a3bdcdb0207dab62575c3c9da494a1cd344022abc8a326ca1a9b7ee3f533bb7ead73a5f9fe5196"
              "91a7ad17643eecbe13d1c8c4adccd2",
        isResearcher=False,
        key=Fernet.generate_key()
      )
      db.session.add(utente)
      db.session.commit()

    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1936, 1048)
    self.driver.find_element(By.CSS_SELECTOR, ".user").click()
    self.driver.find_element(By.ID, "reset").click()
  
  def teardown_method(self):
    self.driver.quit()
    app.config["SQLALCHEMY_DATABASE_URI"] = "mysql://root@127.0.0.1/quantumknn_db"
    if database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
      with app.app_context():
        db.session.delete(User.query.filter_by(email="ADeCurtis123@gmail.com").first())
        db.session.commit()
  
  def test_invalid_email(self):
    self.driver.find_element(By.ID, "email").send_keys("ADeCurtis123")
    self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()

    WebDriverWait(self.driver, 10).until(
      EC.presence_of_element_located((By.CSS_SELECTOR, 'p#error'))
    )
    msg_content = self.driver.find_element(By.CSS_SELECTOR, "p#error").text

    assert "Insert a valid email address" == msg_content

  def test_user_not_found(self):
    self.driver.find_element(By.ID, "email").send_keys("test@gmail.com")
    self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()

    WebDriverWait(self.driver, 10).until(
      EC.presence_of_element_located((By.CSS_SELECTOR, 'p#error'))
    )
    msg_content = self.driver.find_element(By.CSS_SELECTOR, "p#error").text

    assert "No user found associated with the email" == msg_content

  def test_invalid_code(self):
    self.driver.find_element(By.ID, "email").send_keys("ADeCurtis123@gmail.com")
    self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
    time.sleep(4)
    self.driver.find_element(By.ID, "code").send_keys("test")
    time.sleep(1)
    element = self.driver.find_element(By.ID, "verify")
    self.driver.execute_script("arguments[0].click();", element)

    WebDriverWait(self.driver, 10).until(
      EC.presence_of_element_located((By.CSS_SELECTOR, 'p#error'))
    )
    msg_content = self.driver.find_element(By.CSS_SELECTOR, "p#error").text

    assert "Invalid Code, retry or come back to receive another email" == msg_content

  # def test_ivalid_password_len(self):
  #   self.driver.find_element(By.ID, "email").send_keys("ADeCurtis123@gmail.com")
  #   self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
  #   time.sleep(4)
  #   self.driver.find_element(By.ID, "code").send_keys("111111")
  #   time.sleep(2)
  #   script_to_override_code = f"""
  #       code = "{111111}";
  #   """
  #   self.driver.execute_script(script_to_override_code)
  #   time.sleep(1)
  #   element = self.driver.find_element(By.ID, "verify")
  #   self.driver.execute_script("arguments[0].click();", element)
  #   time.sleep(2)
  #   self.driver.find_element(By.ID, "newPW").send_keys("123456")
  #   self.driver.find_element(By.ID, "newPWConfirm").send_keys("123456")
  #   time.sleep(2)
  #   element = self.driver.find_element(By.ID, "verify")
  #   self.driver.execute_script("arguments[0].click();", element)
  # 
  #   WebDriverWait(self.driver, 10).until(
  #     EC.presence_of_element_located((By.CSS_SELECTOR, 'p#error'))
  #   )
  #   msg_content = self.driver.find_element(By.CSS_SELECTOR, "p#error").text
  # 
  #   assert "Input passwords doesn't match or new password length is < 8" == msg_content
  # 
  # def test_ivalid_password_match(self):
  #   self.driver.find_element(By.ID, "email").send_keys("ADeCurtis123@gmail.com")
  #   self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
  #   self.driver.find_element(By.ID, "code").send_keys("")
  #   self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
  #   self.driver.find_element(By.ID, "newPW").send_keys("12345678")
  #   self.driver.find_element(By.ID, "newPWConfirm").send_keys("aaaaaaaaa")
  #   self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
  # 
  #   WebDriverWait(self.driver, 10).until(
  #     EC.presence_of_element_located((By.CSS_SELECTOR, 'p#error'))
  #   )
  #   msg_content = self.driver.find_element(By.CSS_SELECTOR, "p#error").text
  # 
  #   assert "Input passwords doesn't match or new password length is < 8" == msg_content

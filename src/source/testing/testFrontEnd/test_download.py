# Generated by Selenium IDE
import hashlib
import os
import pathlib
import time

from cryptography.fernet import Fernet
from selenium import webdriver
from selenium.webdriver.common.by import By
from sqlalchemy import desc
from sqlalchemy_utils import database_exists, create_database
from datetime import datetime
from src import app
from src import db
from src.source.model.models import User, Dataset


class TestTestdownload():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    app.config["SQLALCHEMY_DATABASE_URI"] = "mysql://root@127.0.0.1/quantumknn_db"
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
      with app.app_context():
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])
    with app.app_context():
      password = "Password123"
      password = hashlib.sha512(password.encode()).hexdigest()
      utente = User(
        email="ADeCurtis123@gmail.com",
        password=password,
        username="Antonio de Curtis",
        name="Antonio",
        surname="De Curtis",
        token="43a75c20e78cef978267a3bdcdb0207dab62575c3c9da494a1cd344022abc8a326ca1a9b7ee3f533bb7ead73a5f9fe5196"
              "91a7ad17643eecbe13d1c8c4adccd2",
        isResearcher=False,
        key=Fernet.generate_key()
      )
      salvataggiodatabase = Dataset(
        email_user="ADeCurtis123@gmail.com",
        name="bupa.csv",
        upload_date=datetime.now(),
        validation="Simple Split",
        ps=False,
        fs=False,
        fe=False,
        model="Random Forest Classifier",
      )
      db.session.add(utente)
      db.session.commit()
      db.session.add(salvataggiodatabase)
      db.session.commit()

  
  def teardown_method(self, method):
    self.driver.quit()
    app.config["SQLALCHEMY_DATABASE_URI"] = "mysql://root@127.0.0.1/quantumknn_db"
    if database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
      with app.app_context():
        db.session.delete(Dataset.query.filter_by(email_user="ADeCurtis123@gmail.com").order_by(desc(Dataset.id)).first())
        db.session.commit()
        db.session.delete(User.query.filter_by(email="ADeCurtis123@gmail.com").first())
        db.session.commit()
  
  def test_download_success(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1936, 1048)
    self.driver.find_element(By.CSS_SELECTOR, ".user").click()
    self.driver.find_element(By.ID, "login").click()
    self.driver.find_element(By.ID, "login").send_keys("ADeCurtis123@gmail.com")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("Password123")
    self.driver.find_element(By.CSS_SELECTOR, ".fourth").click()
    self.driver.find_element(By.CSS_SELECTOR, ".user").click()
    self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(10) > button").click()
    self.driver.find_element(By.ID, "openExperiment").click()
    self.driver.find_element(By.ID, "openExperiment").click()
    time.sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, ".fa-download").click()
    time.sleep(4)
    assert os.path.isfile(pathlib.Path.home() / "Download" / "Experiment_1.zip")
